import { Server } from 'socket.io';
import { parse, serialize } from 'cookie';
import { v4 as uuidv4 } from 'uuid';
import { redisClient } from '../config/redis';
import { config } from '../config/constants';
import { handleJoin } from './matchmaking';
import { ignoreUser } from '../services/ignore.service';
import { ChatService } from '../services/chat.service';

export function registerSocketHandlers(io: Server) {
  // –ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Socket.IO ‚Äì –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º anonClientId —á–µ—Ä–µ–∑ cookie (–µ—Å–ª–∏ –Ω–µ—Ç)
  io.engine.on('headers', (headers, req) => {
    const cookies = req.headers.cookie ? parse(req.headers.cookie) : {};
    if (!cookies.anonClientId) {
      const newId = uuidv4();
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie anonClientId –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ handshake
      headers['set-cookie'] = serialize('anonClientId', newId, {
        httpOnly: true,
        sameSite: 'lax',
        maxAge: 60 * 60 * 24 * 365,   // 1 –≥–æ–¥
        secure: process.env.NODE_ENV === 'production'
      });
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º anonClientId –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –∑–∞–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –µ–≥–æ –Ω–∏–∂–µ
      (req as any)._anonClientId = newId;
    }
  });

  io.on('connection', (socket) => {
    // –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å–æ–∫–µ—Ç–∞ ‚Äì –æ–ø—Ä–µ–¥–µ–ª—è–µ–º anonClientId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let anonId: string | null = null;
    if (socket.handshake.headers.cookie) {
      const cookies = parse(socket.handshake.headers.cookie);
      anonId = cookies.anonClientId || null;
    }
    // –ï—Å–ª–∏ –ø—Ä–∏ –≤–µ–±-—Å–æ–∫–µ—Ç —Ö—ç–Ω–¥—à–µ–π–∫–µ –º—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–æ–≤—ã–π anonClientId, –æ–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–¥–µ—Å—å
    if (!anonId && socket.handshake.request && (socket.handshake.request as any)._anonClientId) {
      anonId = (socket.handshake.request as any)._anonClientId;
    }
    socket.data.anonClientId = anonId;
    console.log(`üîå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: socketId=${socket.id}, anonClientId=${socket.data.anonClientId}`);

    // –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ ('join')
    socket.on('join', async (payload) => {
      if (!socket.data.anonClientId) {
        socket.emit('error', { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à anonClientId. –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ.' });
        return;
      }
      console.log(`üì• JOIN –æ—Ç ${socket.id}:`, payload);
      try {
        await handleJoin(socket, io, payload);
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleJoin:', err);
        socket.emit('error', { message: 'Internal server error' });
      }
    });

    // –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    socket.on('message', async ({ roomId, text }) => {
      console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${socket.id} (anon=${socket.data.anonClientId}) –≤ –∫–æ–º–Ω–∞—Ç—É ${roomId}: ${text}`);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã (–≤–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
      io.to(roomId).emit('message', {
        text,
        from: socket.id
      });
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞)
      const senderAnonId = socket.data.anonClientId;
      if (senderAnonId) {
        await ChatService.addMessage(roomId, senderAnonId, text);
      }
    });

    // –ö–ª–∏–µ–Ω—Ç –Ω–∞–∂–∞–ª "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    socket.on('ignoreUser', async ({ roomId }) => {
      const sessionKey = `session:${roomId}`;
      const session = await redisClient.hgetall(sessionKey);
      const myAnonId = socket.data.anonClientId;
      let partnerAnonId: string | null = null;
      if (session.userA === socket.id && session.anonB) partnerAnonId = session.anonB;
      if (session.userB === socket.id && session.anonA) partnerAnonId = session.anonA;
      if (!myAnonId || !partnerAnonId) {
        console.log(`‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–≥–Ω–æ—Ä: myAnonId=${myAnonId}, partnerAnonId=${partnerAnonId}`);
        return;
      }
      // –ü–æ–º–µ—â–∞–µ–º –ø–∞—Ä—É –≤ –∏–≥–Ω–æ—Ä (Redis)
      await ignoreUser(myAnonId, partnerAnonId);
      console.log(`üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ${myAnonId} –∏ ${partnerAnonId} –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–≥–Ω–æ—Ä`);
      // –û—Ç–∫–ª—é—á–∞–µ–º –æ–±–æ–∏—Ö –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
      if (session.userA) io.to(session.userA).emit('chatEnded');
      if (session.userB) io.to(session.userB).emit('chatEnded');
      await redisClient.del(sessionKey);
      socket.leave(roomId);
    });

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ (–æ—Ç –∫–ª–∏–µ–Ω—Ç–∞)
    socket.on('joinRoomAck', ({ roomId }) => {
      socket.join(roomId);
      console.log(`‚úÖ Socket ${socket.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É ${roomId}`);
      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, —á—Ç–æ –æ–±–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å
    });

    // –û–¥–∏–Ω –∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —á–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∂–∞–ª "–ó–∞–≤–µ—Ä—à–∏—Ç—å")
    socket.on('endChat', async ({ roomId }) => {
      if (!roomId) return;
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "inactive" (–Ω–µ –≤ –ø–æ–∏—Å–∫–µ)
      await redisClient.set(`status:${socket.id}`, 'inactive', 'EX', config.REDIS_STATUS_TTL_SECONDS);
      // –û–ø–æ–≤–µ—â–∞–µ–º –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —á—Ç–æ —á–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
      const sessionKey = `session:${roomId}`;
      const session = await redisClient.hgetall(sessionKey);
      if (session && (session.userA || session.userB)) {
        if (session.userA) io.to(session.userA).emit('chatEnded');
        if (session.userB) io.to(session.userB).emit('chatEnded');
      }
      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–∏ –∏ –ø–æ–∫–∏–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
      await redisClient.del(sessionKey);
      socket.leave(roomId);
      console.log(`üèÅ –ß–∞—Ç ${roomId} –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${socket.id}`);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    socket.on('disconnect', async () => {
      console.log(`‚ùå –û—Ç–∫–ª—é—á–∏–ª—Å—è –∫–ª–∏–µ–Ω—Ç ${socket.id}`);
      await redisClient.del(`status:${socket.id}`);
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –∏–∑ –æ—á–µ—Ä–µ–¥–µ–π (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —Å–∞–π—Ç, –Ω–æ –æ—Å—Ç–∞–ª—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏)
    });
  });
}