import { Server, Socket } from 'socket.io';
import { v4 as uuidv4 } from 'uuid';
import { redisClient } from '../config/redis';
import { config } from '../config/constants';
import { isIgnored } from '../services/ignore.service';
import { Conversation } from '../models/conversation.model';

interface JoinPayload {
    ageGroup?: string;
    gender?: string;
    seekingGender?: string;
    seekingAgeGroups?: string[];
    isAdult?: boolean;
    tag?: string;
  }

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å –µ–º—É –ø–∞—Ä—É.
 */
export async function handleJoin(socket: Socket, io: Server, payload: JoinPayload) {
    const { ageGroup, gender, seekingGender, seekingAgeGroups, isAdult = false, tag } = payload;
    const myAnonId = socket.data.anonClientId;
    const trimmedTag = tag?.trim();

  // 1. –£–¥–∞–ª—è–µ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π, –≥–¥–µ –æ–Ω –º–æ–≥ –æ—Å—Ç–∞—Ç—å—Å—è
  for (const g of ['m', 'f']) {
    for (const a of ['18', '19-25', '26-35', '36+']) {
      const queueKey = `queue:${g}:${a}`;
      const entries = await redisClient.lrange(queueKey, 0, -1);
      for (const entryRaw of entries) {
        try {
          const entry = JSON.parse(entryRaw);
          if (entry.socketId === socket.id) {
            await redisClient.lrem(queueKey, 0, entryRaw);
            console.log(`üßπ –û—á–∏—Å—Ç–∏–ª–∏ —Å—Ç–∞—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ${socket.id} –∏–∑ ${queueKey}`);
          }
        } catch (e) {
          // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π JSON
        }
      }
    }
  }

// üéØ –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–µ–≥ ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å –ø–æ —Ç–µ–≥—É
  if (trimmedTag && trimmedTag.length > 0) {
    const queueKey = `queue:tag:${trimmedTag}`;
    const myEntry = JSON.stringify({
      socketId: socket.id,
      anonClientId: myAnonId,
      isAdult
    });
  
    await redisClient.lpush(queueKey, myEntry);
    await redisClient.set(`status:${socket.id}`, 'active', 'EX', config.REDIS_STATUS_TTL_SECONDS);
  
    const tempBack: string[] = [];
    let candidateRaw: string | null;
  
    while ((candidateRaw = await redisClient.rpop(queueKey)) !== null) {
      let candidate;
      try {
        candidate = JSON.parse(candidateRaw);
      } catch {
        continue;
      }
  
      if (candidate.socketId === socket.id) {
        tempBack.push(candidateRaw);
        continue;
      }
  
      // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∂–∏–º 18+ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
      if ((candidate.isAdult || false) !== isAdult) {
        tempBack.push(candidateRaw);
        continue;
      }
  
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω
      if (!io.sockets.sockets.has(candidate.socketId)) continue;
  
      const candidateStatus = await redisClient.get(`status:${candidate.socketId}`);
      if (candidateStatus !== 'active') {
        tempBack.push(candidateRaw);
        continue;
      }
  
      if (await isIgnored(myAnonId, candidate.anonClientId)) {
        tempBack.push(candidateRaw);
        continue;
      }
  
      // ‚úÖ –ú–∞—Ç—á –ø–æ —Ç–µ–≥—É
      const roomId = uuidv4();
  
      await redisClient.hset(`session:${roomId}`, {
        userA: socket.id,
        userB: candidate.socketId,
        anonA: myAnonId,
        anonB: candidate.anonClientId,
        created: Date.now()
      });
  
      await redisClient.set(`status:${socket.id}`, 'matched', 'EX', config.REDIS_STATUS_TTL_SECONDS);
      await redisClient.set(`status:${candidate.socketId}`, 'matched', 'EX', config.REDIS_STATUS_TTL_SECONDS);
  
      // üíæ Mongo: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ç–µ–≥–æ–º –∏ —Ñ–ª–∞–≥–æ–º isAdult
      await Conversation.create({
        _id: roomId,
        anonA: myAnonId,
        anonB: candidate.anonClientId,
        isAdult,
        tag: trimmedTag
      });
  
      // –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
      socket.join(roomId);
      const candidateSocket = io.sockets.sockets.get(candidate.socketId);
      if (candidateSocket) candidateSocket.join(roomId);
  
      socket.emit('joinRoom', { roomId });
      if (candidateSocket) candidateSocket.emit('joinRoom', { roomId });
      io.to(roomId).emit('roomReady');
  
      console.log(`üè∑ –ú–∞—Ç—á –ø–æ —Ç–µ–≥—É "${trimmedTag}" (${isAdult ? '18+' : '–æ–±—ã—á–Ω—ã–π'}) ‚Üí –∫–æ–º–Ω–∞—Ç–∞ ${roomId}`);
      return;
    }
  
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ
    if (tempBack.length > 0) {
      await redisClient.lpush(queueKey, ...tempBack.reverse());
    }
  
    console.log(`‚è≥ ${socket.id} –æ–∂–∏–¥–∞–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ —Ç–µ–≥—É "${trimmedTag}"`);
    return;
  }
    
  // 2. –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è –≤ –æ—á–µ—Ä–µ–¥—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–≤–æ–∏–º –ø–æ–ª–æ–º –∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø–æ–π
  const myEntry = JSON.stringify({
    socketId: socket.id,
    anonClientId: myAnonId,
    ageGroup,
    gender,
    seekingGender,
    seekingAgeGroups,
    joined: Date.now()
  });
  const myQueueKey = `queue:${gender}:${ageGroup}`;
  await redisClient.lpush(myQueueKey, myEntry);

  // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> "active" (–∏—â–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞)
  await redisClient.set(`status:${socket.id}`, 'active', 'EX', config.REDIS_STATUS_TTL_SECONDS);

  // 4. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ —Ç–µ—Ö, –∫—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
  for (const group of seekingAgeGroups) {
    const queueKey = `queue:${seekingGender}:${group}`;
    let candidateRaw: string | null;
    const tempCandidates: string[] = [];
    let checkedCount = 0;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ü–∞ –æ—á–µ—Ä–µ–¥–∏ (rpop) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    while ((candidateRaw = await redisClient.rpop(queueKey)) !== null) {
      let candidate;
      try {
        candidate = JSON.parse(candidateRaw);
      } catch {
        continue;  // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON
      }
      checkedCount++;

      // 4.1. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–±—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
      if (candidate.socketId === socket.id) {
        tempCandidates.push(candidateRaw);
        console.log(`üë§ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º self: ${candidate.socketId}`);
        continue;
      }

      // 4.2. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ñ–ª–∞–π–Ω-–∫–ª–∏–µ–Ω—Ç–∞ (–∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –æ—Ç–∫–ª—é—á–∏–ª—Å—è)
      if (!io.sockets.sockets.has(candidate.socketId)) {
        console.log(`üëª –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω: ${candidate.socketId}`);
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—è "–ø—Ä–∏–∑—Ä–∞–∫–∞"
        continue;
      }

      // 4.3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ–º –ª–∏ –º—ã –≤—Å—Ç—Ä–µ—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
      const candidateSeekingAges: string[] = Array.isArray(candidate.seekingAgeGroups)
        ? candidate.seekingAgeGroups
        : [candidate.seekingAgeGroups];
      if (candidate.seekingGender === gender && candidateSeekingAges.includes(ageGroup)) {
        // 4.4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω?)
        const candidateStatus = await redisClient.get(`status:${candidate.socketId}`);
        if (candidateStatus !== 'active') {
          // –ö–∞–Ω–¥–∏–¥–∞—Ç —É–∂–µ –Ω–µ –∏—â–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          tempCandidates.push(candidateRaw);
          console.log(`‚ö™Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${candidate.socketId}: —Å—Ç–∞—Ç—É—Å = ${candidateStatus}`);
          continue;
        }

        // 4.5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞
        if (await isIgnored(myAnonId, candidate.anonClientId)) {
          tempCandidates.push(candidateRaw);
          console.log(`‚õîÔ∏è –ò–≥–Ω–æ—Ä: –ø–∞—Ä–∞ ${myAnonId} –∏ ${candidate.anonClientId}`);
          continue;
        }

        // 4.6. –£–°–ü–ï–®–ù–´–ô –ú–≠–¢–ß!
        const roomId = uuidv4();
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é —á–∞—Ç–∞ –≤ Redis
        await redisClient.hset(`session:${roomId}`, {
          userA: socket.id,
          userB: candidate.socketId,
          anonA: myAnonId,
          anonB: candidate.anonClientId,
          created: Date.now()
        });
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–æ–∏—Ö –Ω–∞ "matched"
        await redisClient.set(`status:${socket.id}`, 'matched', 'EX', config.REDIS_STATUS_TTL_SECONDS);
        await redisClient.set(`status:${candidate.socketId}`, 'matched', 'EX', config.REDIS_STATUS_TTL_SECONDS);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ MongoDB (–¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∂–∞–ª–æ–±)
          await Conversation.create({
              _id: roomId,
              anonA: myAnonId,
              anonB: candidate.anonClientId
          });

        // –û–ø–æ–≤–µ—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–∞—Ä–µ –∏ –∫–æ–º–Ω–∞—Ç–µ
          socket.join(roomId);
        //–î–≤—É—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É
        const candidateSocket = io.sockets.sockets.get(candidate.socketId);
            if (candidateSocket) {
        candidateSocket.join(roomId);
        }
          
        // –¢–µ–ø–µ—Ä—å –æ–±–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∞—Ç joinRoom –∏ roomReady
        socket.emit('joinRoom', { roomId });
            if (candidateSocket) {
            candidateSocket.emit('joinRoom', { roomId });
          }
        io.to(roomId).emit('roomReady');
          
        console.log(`‚úÖ –ú–∞—Ç—á! –ö–æ–º–Ω–∞—Ç–∞ ${roomId}: ${myAnonId} <-> ${candidate.anonClientId}`);
        await redisClient.lrem(myQueueKey, 0, myEntry);
        return;
      }

      // –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –ø–æ–¥–æ—à—ë–ª –ø–æ —É—Å–ª–æ–≤–∏—è–º ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
      tempCandidates.push(candidateRaw);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞)
    if (tempCandidates.length > 0) {
      await redisClient.lpush(queueKey, ...tempCandidates.reverse());
    }
    if (checkedCount > 0) {
      console.log(`üßæ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ ${queueKey}: ${checkedCount}`);
    }
  }

  // 5. –ï—Å–ª–∏ –ø–∞—Ä—É –Ω–µ –Ω–∞—à–ª–∏ ‚Äì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞—ë—Ç—Å—è –∂–¥–∞—Ç—å –≤ —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏
  console.log(`üïì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} (${myAnonId}) –æ–∂–∏–¥–∞–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ ${myQueueKey}`);
}