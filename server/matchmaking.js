import { config } from './config.js'
import { v4 as uuidv4 } from 'uuid'

/**
 * –ò—â–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç self-join, –æ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω-–∫–ª–∏–µ–Ω—Ç–æ–≤,  
 * –∏ –∫–ª–∞–¥—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.
 * 
 * @param {object} socket - –¢–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç (–µ–≥–æ —Å–µ—Å—Å–∏—è WebSocket)
 * @param {object} io - –°–µ—Ä–≤–µ—Ä socket.io (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫—Ç–æ –æ–Ω–ª–∞–π–Ω)
 * @param {object} redis - Redis-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–µ–π/—Å—Ç–∞—Ç—É—Å–æ–≤
 * @param {object} payload - –ö—Ç–æ –∫–æ–≥–æ –∏—â–µ—Ç (–ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç –∏ —Ç.–ø.)
 */
export async function handleJoin(socket, io, redis, payload) {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–∑ payload (—Ç–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª –∫–ª–∏–µ–Ω—Ç)
  const { ageGroup, gender, seekingGender, seekingAgeGroup } = payload

  // –ö–ª—é—á –æ—á–µ—Ä–µ–¥–∏ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, queue:f:18-25 (–∏—â–µ–º –¥–µ–≤—É—à–µ–∫ 18‚Äì25)
  const queueKey = `queue:${seekingGender}:${seekingAgeGroup}`

  // rpop ‚Äî –¥–æ—Å—Ç–∞—ë–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å "–∫–æ–Ω—Ü–∞" –æ—á–µ—Ä–µ–¥–∏ (—Å—Ç–∞—Ä–æ–≥–æ)
  let candidateRaw = await redis.rpop(queueKey)

  // –¶–∏–∫–ª: –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö, –∫—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥—ë–º –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  while (candidateRaw) {
    const candidate = JSON.parse(candidateRaw)

    // [A] –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∞–º –ª–∏ —è —Å–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ F5)
    if (candidate.socketId === socket.id) {
      // ‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–∫–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å)
      console.log("‚ö†Ô∏è –°–∞–º —Å–µ–±–µ –Ω–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! –í–æ–∑–≤—Ä–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å.")
      candidateRaw = await redis.rpop(queueKey) // –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ
      continue
    }

    // [B] –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–Ω–ª–∞–π–Ω –ª–∏ –≤–æ–æ–±—â–µ —ç—Ç–æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç (–∂–∏–≤–æ–π –ª–∏ —Å–æ–∫–µ—Ç)
    if (!io.sockets.sockets.has(candidate.socketId)) {
      // ‚ùå –û–Ω —É–∂–µ –æ—Ñ—Ñ–ª–∞–π–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      console.log(`‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç ${candidate.socketId} –æ—Ñ—Ñ–ª–∞–π–Ω, –∏—â–µ–º –¥–∞–ª—å—à–µ...`)
      candidateRaw = await redis.rpop(queueKey)
      continue
    }

    // [C] –ù–∞—à–ª–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞!
    const roomId = uuidv4() // –ì–µ–Ω–µ—Ä–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id –∫–æ–º–Ω–∞—Ç—ã

    // ‚Äî –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç—É —Å–µ—Å—Å–∏—é –≤ Redis (–º–æ–∂–Ω–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏/–∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
    await redis.hset(`session:${roomId}`, {
      userA: socket.id,
      userB: candidate.socketId,
      created: Date.now()
    })

    // ‚Äî –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–æ–∏—Ö –∫–∞–∫ ‚Äúmatched‚Äù (–Ω–∞—à—ë–ª—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫)
    // –°—Ç–∞—Ç—É—Å –∂–∏–≤—ë—Ç N —Å–µ–∫—É–Ω–¥ (TTL)
    await redis.set(
      `status:${socket.id}`,           // –∫–ª—é—á —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      'matched',                       // –∑–Ω–∞—á–µ–Ω–∏–µ (—á—Ç–æ –Ω–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫)
      'EX',                            // ‚Äúexpire‚Äù (–∫–ª—é—á —É—Å—Ç–∞—Ä–µ–≤–∞–µ—Ç)
      config.REDIS_STATUS_TTL_SECONDS  // TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 120)
    )
    await redis.set(
      `status:${candidate.socketId}`,
      'matched',
      'EX',
      config.REDIS_STATUS_TTL_SECONDS
    )

    // ‚Äî –û–±–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ (roomId)
    socket.join(roomId) // –¢–µ–∫—É—â–∏–π
    socket.emit('joinRoom', { roomId }) // –°–æ–æ–±—â–∞–µ–º —Ç–µ–∫—É—â–µ–º—É
    socket.to(candidate.socketId).emit('joinRoom', { roomId }) // –í—Ç–æ—Ä–æ–º—É

    // ‚Äî –®–ª—ë–º –æ–±–æ–∏–º —Å–∏–≥–Ω–∞–ª ‚ÄúroomReady‚Äù: —Ç–µ–ø–µ—Ä—å —á–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω
    socket.server.to(roomId).emit("roomReady")
    console.log(`üí¨ Room created: ${roomId} between ${socket.id} and ${candidate.socketId}`)
    return // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é (–∑–∞–∫–æ–Ω—á–∏–ª–∏)
  }

  // –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ (–∏–ª–∏ –≤—Å–µ –±—ã–ª–∏ –æ—Ñ—Ñ–ª–∞–π–Ω/—Å–∞–º —Å–µ–±–µ) ‚Äî –∫–ª–∞–¥—ë–º —Å–µ–±—è –≤ –æ—á–µ—Ä–µ–¥—å
  const entry = JSON.stringify({
    socketId: socket.id,
    ageGroup,
    gender,
    seekingGender,
    seekingAgeGroup,
    joined: Date.now()
  })

  await redis.lpush(queueKey, entry) // –í –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏ (–Ω–æ–≤—ã–π)
  await redis.set(
    `status:${socket.id}`,
    'waiting',                       // –µ—â—ë –∏—â–µ—Ç!
    'EX',
    config.REDIS_STATUS_TTL_SECONDS
  )
  console.log(`üïì ${socket.id} added to queue ${queueKey}`)
}