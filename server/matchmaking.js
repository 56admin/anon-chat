// server/matchmaking.js

import { config } from './config.js'
import { v4 as uuidv4 } from 'uuid'

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞
 * @param {object} socket - –æ–±—ä–µ–∫—Ç socket.io –∫–ª–∏–µ–Ω—Ç–∞
 * @param {object} redis - Redis –∫–ª–∏–µ–Ω—Ç
 * @param {object} payload - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞: –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –∫–æ–≥–æ –∏—â–µ–º
 */
export async function handleJoin(socket, redis, payload) {
  const {
    ageGroup,        // –ù–∞–ø—Ä–∏–º–µ—Ä: '18-25'
    gender,          // –ù–∞–ø—Ä–∏–º–µ—Ä: 'm'
    seekingGender,   // –ù–∞–ø—Ä–∏–º–µ—Ä: 'f'
    seekingAgeGroup  // –ù–∞–ø—Ä–∏–º–µ—Ä: '18+'
  } = payload

  // –°–æ–∑–¥–∞—ë–º –∫–ª—é—á –æ—á–µ—Ä–µ–¥–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "queue:f:18+")
  const queueKey = `queue:${seekingGender}:${seekingAgeGroup}`

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏: –µ—Å—Ç—å –ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫
  const candidateRaw = await redis.rpop(queueKey)

  if (candidateRaw) {
    // –ù–∞—à–ª–∏ –∫–æ–≥–æ-—Ç–æ! –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏—Ö –≤ –∫–æ–º–Ω–∞—Ç—É
    const candidate = JSON.parse(candidateRaw)
    const roomId = uuidv4()

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ—É –æ —Å–µ—Å—Å–∏–∏
    await redis.hset(`session:${roomId}`, {
      userA: socket.id,
      userB: candidate.socketId,
      created: Date.now()
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–æ–∏—Ö
    await redis.set(`status:${socket.id}`, 'matched', 'EX', config.REDIS_STATUS_TTL_SECONDS)
    await redis.set(`status:${candidate.socketId}`, 'matched', 'EX', config.REDIS_STATUS_TTL_SECONDS)

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –≤ –∫–æ–º–Ω–∞—Ç—É
    socket.join(roomId)
    socket.to(candidate.socketId).emit('joinRoom', { roomId })
    socket.emit('joinRoom', { roomId })

    console.log(`üí¨ Room created: ${roomId} between ${socket.id} and ${candidate.socketId}`)

  } else {
    // –ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Üí —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
    const entry = JSON.stringify({
      socketId: socket.id,
      ageGroup,
      gender,
      seekingGender,
      seekingAgeGroup,
      joined: Date.now()
    })

    await redis.lpush(queueKey, entry)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ TTL
    await redis.set(`status:${socket.id}`, 'waiting', 'EX', config.REDIS_STATUS_TTL_SECONDS)

    console.log(`üïì ${socket.id} added to queue ${queueKey}`)
  }
}