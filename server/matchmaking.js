import { config } from './config.js'
import { v4 as uuidv4 } from 'uuid'

import { isIgnored } from './redisIgnore.js';


export async function handleJoin(socket, io, redis, payload) {
  const {
    ageGroup,        // —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: '18-25')
    gender,          // —Ç–≤–æ–π –ø–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'm')
    seekingGender,   // –∫–æ–≥–æ –∏—â–µ—à—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'f')
    seekingAgeGroups // –º–∞—Å—Å–∏–≤ –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ['18-25','25-35'])
  } = payload;

  // --- 1. –ß–∏—Å—Ç–∏–º —Å–µ–±—è –∏–∑ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π (safety: –ø–æ –≤—Å–µ–º –ø–æ–ª–∞–º –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞–º)
  for (const g of ["m", "f"]) {
    for (const a of ["18-25", "25-35", "35+"]) {
      const q = `queue:${g}:${a}`;
      // –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è (–ø–æ socketId)
      // –•—Ä–∞–Ω–∏–º –≤ –æ—á–µ—Ä–µ–¥–∏ JSON —Å socketId, –ø–æ—ç—Ç–æ–º—É —É–¥–∞–ª—è–µ–º –ø–æ —Å—Ç—Ä–æ–∫–µ:
      const fakeEntry = JSON.stringify({ socketId: socket.id });
      await redis.lrem(q, 0, fakeEntry); // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç entry –¥—Ä—É–≥–æ–π, –Ω–∞–¥–æ json-–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å socketId
    }
  }

  // --- 2. –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è –¢–û–õ–¨–ö–û –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å
  const myEntry = JSON.stringify({
    socketId: socket.id,
    anonClientId: socket.data.anonClientId,
    ageGroup,
    gender,
    seekingGender,
    seekingAgeGroups,
    joined: Date.now()
  });
  const myQueue = `queue:${gender}:${ageGroup}`;
  await redis.lpush(myQueue, myEntry);

  // --- 3. –°—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å "active" (–∏—â–µ—Ç!)
  await redis.set(
    `status:${socket.id}`,
    'active',
    'EX',
    config.REDIS_STATUS_TTL_SECONDS // –ù–∞–ø—Ä–∏–º–µ—Ä, 300
  );

  // --- 4. –ò—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –í–°–ï–ú –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–æ–∑—Ä–∞—Å—Ç–∞–º
  for (const group of seekingAgeGroups) {
    const queueKey = `queue:${seekingGender}:${group}`;
    let candidateRaw;
    while ((candidateRaw = await redis.rpop(queueKey))) {
      let candidate;
      try { candidate = JSON.parse(candidateRaw); } catch { continue; }

      // --- –ù–µ self-join
      if (candidate.socketId === socket.id) continue;
      // --- –¢–æ–ª—å–∫–æ ONLINE
      if (!io.sockets.sockets.has(candidate.socketId)) continue;

      // --- –í—Å—Ç—Ä–µ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      // –ú—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –∫–∞–Ω–¥–∏–¥–∞—Ç—É
      const candidateSeekingAges = Array.isArray(candidate.seekingAgeGroups)
        ? candidate.seekingAgeGroups
        : [candidate.seekingAgeGroups];

      if (
        candidate.seekingGender === gender &&
        candidateSeekingAges.includes(ageGroup)
      ) {
        // --- –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å (–∏—â–µ—Ç –ª–∏!)
        const candidateStatus = await redis.get(`status:${candidate.socketId}`);
        if (candidateStatus !== 'active') {
          // –í–µ—Ä–Ω—ë–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ –µ–≥–æ –æ—á–µ—Ä–µ–¥—å
          await redis.lpush(queueKey, candidateRaw);
          continue;
        }

        // –ù–∞–π–¥–µ–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç
        if (await isIgnored(redis, socket.data.anonClientId, candidate.anonClientId)) {
        // –≠—Ç–∏ –¥–≤–æ–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏–≥–Ω–æ—Ä—è—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º!
        return; // –ò–ª–∏ continue; –µ—Å–ª–∏ –±—É–¥–µ—Ç —Ü–∏–∫–ª (—É —Ç–µ–±—è —Å–µ–π—á–∞—Å –æ–¥–∏–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç)
        }

        // --- –ï—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –ú–∞—Ç—á–∏–º:
        const roomId = uuidv4();

        await redis.hset(`session:${roomId}`, {
          userA: socket.id,
          userB: candidate.socketId,
          created: Date.now()
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–æ–∏—Ö
        await redis.set(`status:${socket.id}`, 'matched', 'EX', config.REDIS_STATUS_TTL_SECONDS);
        await redis.set(`status:${candidate.socketId}`, 'matched', 'EX', config.REDIS_STATUS_TTL_SECONDS);

        // –°–æ–µ–¥–∏–Ω—è–µ–º –≤ –∫–æ–º–Ω–∞—Ç—É
        socket.join(roomId);
        socket.emit('joinRoom', { roomId });
        socket.to(candidate.socketId).emit('joinRoom', { roomId });
        socket.server.to(roomId).emit('roomReady');
        console.log(`üí¨ Room created: ${roomId} between ${socket.id} and ${candidate.socketId}`);
        return;
      }

      // --- –ù–µ –ø–æ–¥–æ—à—ë–ª: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å
      await redis.lpush(queueKey, candidateRaw);
    }
  }

  // --- –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∂–¥—ë–º (—É–∂–µ —Å—Ç–æ–∏–º –≤ —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏)
  console.log(`üïì ${socket.id} added to queue:${gender}:${ageGroup}`);
}