import { config } from './config.js'
import { v4 as uuidv4 } from 'uuid'

/**
 * –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞.
 */
export async function handleJoin(socket, io, redis, payload) {
  const {
    ageGroup,        // —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: '18-25')
    gender,          // —Ç–≤–æ–π –ø–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'm')
    seekingGender,   // –∫–æ–≥–æ –∏—â–µ—à—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'f')
    seekingAgeGroups // –º–∞—Å—Å–∏–≤ –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ['18-25','25-35'])
  } = payload;

  // 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤
  for (const group of seekingAgeGroups) {
    const queueKey = `queue:${seekingGender}:${group}`;
    let candidateRaw;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏ (–∏—â–µ–º —Ç–æ–≥–æ, –∫—Ç–æ –æ–Ω–ª–∞–π–Ω –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞–º)
    while ((candidateRaw = await redis.rpop(queueKey))) {
      const candidate = JSON.parse(candidateRaw);

      // [A] –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º self-join
      if (candidate.socketId === socket.id) continue;

      // [B] –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç –æ–Ω–ª–∞–π–Ω
      if (!io.sockets.sockets.has(candidate.socketId)) {
        console.log(`‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç ${candidate.socketId} –æ—Ñ—Ñ–ª–∞–π–Ω, –∏—â–µ–º –¥–∞–ª—å—à–µ...`);
        continue;
      }

      // [C] –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ú–´ –ø–æ–ø–∞–¥–∞–µ–º –≤ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–≤—Å—Ç—Ä–µ—á–Ω—ã–π –ø–æ–∏—Å–∫)
      // –¢–æ –µ—Å—Ç—å –º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —á–∏—Å–ª–µ —Ç–µ—Ö, –∫–æ–≥–æ –∏—â–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç:
      //  - –º–æ–π –ø–æ–ª ‚àà candidate.seekingGender
      //  - –º–æ–π –≤–æ–∑—Ä–∞—Å—Ç ‚àà candidate.seekingAgeGroups
      const candidateSeekingAges = Array.isArray(candidate.seekingAgeGroups)
        ? candidate.seekingAgeGroups
        : [candidate.seekingAgeGroups];
      if (
        candidate.seekingGender === gender &&
        candidateSeekingAges.includes(ageGroup)
      ) {
        // –ù–∞–π–¥–µ–Ω –∏–¥–µ–∞–ª—å–Ω—ã–π –º–∞—Ç—á!

        const roomId = uuidv4();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis —Å–µ—Å—Å–∏—é
        await redis.hset(`session:${roomId}`, {
          userA: socket.id,
          userB: candidate.socketId,
          created: Date.now()
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–æ–∏—Ö
        await redis.set(`status:${socket.id}`, 'matched', 'EX', config.REDIS_STATUS_TTL_SECONDS);
        await redis.set(`status:${candidate.socketId}`, 'matched', 'EX', config.REDIS_STATUS_TTL_SECONDS);

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –∫–æ–º–Ω–∞—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        socket.join(roomId);
        socket.emit('joinRoom', { roomId });
        socket.to(candidate.socketId).emit('joinRoom', { roomId });
        socket.server.to(roomId).emit("roomReady");

        console.log(`üí¨ Room created: ${roomId} between ${socket.id} and ${candidate.socketId}`);
        return;
      }

      // [D] –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–æ—à—ë–ª ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
      await redis.lpush(queueKey, candidateRaw);
    }
  }

  // 2. –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Å—Ç–∞–≤–∏–º —Å–µ–±—è –≤ –∫–∞–∂–¥—É—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ—á–µ—Ä–µ–¥—å (–ø–æ –≤—Å–µ–º —Å–≤–æ–∏–º –≤–æ–∑—Ä–∞—Å—Ç–∞–º)
  for (const group of seekingAgeGroups) {
    const myQueueKey = `queue:${gender}:${group}`;
    const entry = JSON.stringify({
      socketId: socket.id,
      ageGroup,
      gender,
      seekingGender,
      seekingAgeGroups,
      joined: Date.now()
    });
    await redis.lpush(myQueueKey, entry);
  }
  await redis.set(
    `status:${socket.id}`,
    'waiting',
    'EX',
    config.REDIS_STATUS_TTL_SECONDS
  );
  console.log(`üïì ${socket.id} added to queue(s) for: ${seekingAgeGroups.join(', ')}`);
}