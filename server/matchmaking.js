import { config } from './config.js'
import { v4 as uuidv4 } from 'uuid'

import { isIgnored } from './redisIgnore.js';

/**
 * –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä—ã –¥–ª—è —á–∞—Ç–∞ (–ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∏ —Å —É—á–µ—Ç–æ–º –∏–≥–Ω–æ—Ä–∞).
 * socket.data.anonClientId ‚Äî —Ç–µ–ø–µ—Ä—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å.
 */
export async function handleJoin(socket, io, redis, payload) {
  const {
    ageGroup,        // —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: '19-25')
    gender,          // —Ç–≤–æ–π –ø–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'm')
    seekingGender,   // –∫–æ–≥–æ –∏—â–µ—à—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'f')
    seekingAgeGroups // –º–∞—Å—Å–∏–≤ –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ['19-25','26-35'])
  } = payload;

  const myAnonId = socket.data.anonClientId;

  // 1. –ß–∏—Å—Ç–∏–º —Å–µ–±—è –∏–∑ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π (–ø–æ socketId)
  for (const g of ["m", "f"]) {
    for (const a of ["18", "19-25", "26-35", "36+"]) {
      const q = `queue:${g}:${a}`;
      // –ß–∏—Å—Ç–∏–º –ø–æ socketId
      const entries = await redis.lrange(q, 0, -1);
      for (const entryRaw of entries) {
        try {
          const entry = JSON.parse(entryRaw);
          if (entry.socketId === socket.id) {
            await redis.lrem(q, 0, entryRaw);
            console.log(`üßπ –£–¥–∞–ª–∏–ª–∏ —Å—Ç–∞—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ${socket.id} –∏–∑ ${q}`);
          }
        } catch {}
      }
    }
  }

  // 2. –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å
  const myEntry = JSON.stringify({
    socketId: socket.id,
    anonClientId: myAnonId,
    ageGroup,
    gender,
    seekingGender,
    seekingAgeGroups,
    joined: Date.now()
  });
  const myQueue = `queue:${gender}:${ageGroup}`;
  await redis.lpush(myQueue, myEntry);

  // 3. –°—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å "active"
  await redis.set(
    `status:${socket.id}`,
    'active',
    'EX',
    config.REDIS_STATUS_TTL_SECONDS // –ù–∞–ø—Ä–∏–º–µ—Ä, 300
  );

  // 4. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  for (const group of seekingAgeGroups) {
    const queueKey = `queue:${seekingGender}:${group}`;
    let candidateRaw;
    let checkedCandidates = 0;
    const tempCandidates = [];

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ tempCandidates, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—á–µ—Ä–µ–¥—å
    while ((candidateRaw = await redis.rpop(queueKey))) {
      let candidate;
      try { candidate = JSON.parse(candidateRaw); } catch { continue; }
      checkedCandidates++;

      // 4.1. –ü—Ä–æ–ø—É—Å–∫ —Å–∞–º–æ–≥–æ —Å–µ–±—è
      if (candidate.socketId === socket.id) {
        console.log(`üë§ –ü—Ä–æ–ø—É—â–µ–Ω self: ${candidate.socketId}`);
        tempCandidates.push(candidateRaw);
        continue;
      }

      // 4.2. –¢–æ–ª—å–∫–æ ONLINE
      if (!io.sockets.sockets.has(candidate.socketId)) {
        console.log(`üëª –ü—Ä–æ–ø—É—â–µ–Ω offline: ${candidate.socketId}`);
        continue; // offline –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ‚Äî —á–∏—Å—Ç–∏–º –æ—á–µ—Ä–µ–¥—å!
      }

      // 4.3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç—Ä–µ—á–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
      const candidateSeekingAges = Array.isArray(candidate.seekingAgeGroups)
        ? candidate.seekingAgeGroups
        : [candidate.seekingAgeGroups];

      if (
        candidate.seekingGender === gender &&
        candidateSeekingAges.includes(ageGroup)
      ) {
        // 4.4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        const candidateStatus = await redis.get(`status:${candidate.socketId}`);
        if (candidateStatus !== 'active') {
          console.log(`‚ö™Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω: ${candidate.socketId} —Å—Ç–∞—Ç—É—Å –Ω–µ active`);
          tempCandidates.push(candidateRaw);
          continue;
        }

        // 4.5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥–Ω–æ—Ä–∞
        if (await isIgnored(redis, myAnonId, candidate.anonClientId)) {
          console.log(`‚õîÔ∏è –ò–≥–Ω–æ—Ä –º–µ–∂–¥—É ${myAnonId} –∏ ${candidate.anonClientId}, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø–∞—Ä—É`);
          tempCandidates.push(candidateRaw);
          continue;
        }

        // 4.6. –£–°–ü–ï–®–ù–´–ô –ú–ê–¢–ß! –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å
        const roomId = uuidv4();
        await redis.hset(`session:${roomId}`, {
          userA: socket.id,
          userB: candidate.socketId,
          anonA: socket.data.anonClientId,
          anonB: candidate.anonClientId,
          created: Date.now()
        });

        await redis.set(`status:${socket.id}`, 'matched', 'EX', config.REDIS_STATUS_TTL_SECONDS);
        await redis.set(`status:${candidate.socketId}`, 'matched', 'EX', config.REDIS_STATUS_TTL_SECONDS);

        socket.join(roomId);
        socket.emit('joinRoom', { roomId });
        socket.to(candidate.socketId).emit('joinRoom', { roomId });
        socket.server.to(roomId).emit('roomReady');
        console.log(`‚úÖ –ú–∞—Ç—á: ${myAnonId} <-> ${candidate.anonClientId} (room: ${roomId})`);
        return;
      }

      // –ï—Å–ª–∏ –Ω–µ mutual match ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å
      tempCandidates.push(candidateRaw);
    }

    // –í–µ—Ä–Ω—ë–º –≤—Å–µ—Ö –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
    if (tempCandidates.length > 0) {
      await redis.lpush(queueKey, ...tempCandidates.reverse()); // reverse ‚Äî —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫
    }
    if (checkedCandidates > 0) {
      console.log(`üßæ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ ${queueKey}: ${checkedCandidates}`);
    }
  }

  // --- –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∂–¥—ë–º (—É–∂–µ —Å—Ç–æ–∏–º –≤ —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏)
  console.log(`üïì ${myAnonId} added to queue:${gender}:${ageGroup}`);
}