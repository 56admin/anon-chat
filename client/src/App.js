import { useState, useEffect } from "react"
import { io } from "socket.io-client"

const socket = io("http://localhost:3001") // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ backend-—Å–æ–∫–µ—Ç—É

function App() {
  // üß† –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [gender, setGender] = useState("m")
  const [ageGroup, setAgeGroup] = useState("18-25")
  const [seekingGender, setSeekingGender] = useState("f")
  const [seekingAgeGroup, setSeekingAgeGroup] = useState("18-25")

  // üîÅ –ö–æ–º–Ω–∞—Ç–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const [connectedRoom, setConnectedRoom] = useState(null)
  const [message, setMessage] = useState("") // –í–≤–æ–¥–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const [chat, setChat] = useState([])       // –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const [mySocketId, setMySocketId] = useState("") //–ó–Ω–∞–µ–º —Å–≤–æ–π id –≤ —á–∞—Ç–µ
  const [isRoomReady, setIsRoomReady] = useState(false) // –º–æ–∂–Ω–æ –ª–∏ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
  const [inChat, setInChat] = useState(false) //–ü—Ä–∏ ‚ÄújoinRoom‚Äù –∏ ‚ÄúroomReady‚Äù —Å—Ç–∞–≤–∏—Ç—å setInChat(true); –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞ ‚Äî setInChat(false)
  const handleEndChat = () => {
    if (connectedRoom) {
      socket.emit("endChat", { roomId: connectedRoom })
    }
    setConnectedRoom(null)
    setChat([])
    setIsRoomReady(false)
  }

  // üîå –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {

    socket.on("roomReady", () => {
      setIsRoomReady(true)
      console.log("–ö–æ–º–Ω–∞—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ —á–∞—Ç—É!");
    });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–π socket.id –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    socket.on("connect", () => {
    setMySocketId(socket.id)
    console.log("–ú–û–ô socket.id:", socket.id)
    })

    socket.on("joinRoom", ({ roomId }) => {
      setConnectedRoom(roomId)
      socket.emit("joinRoomAck", { roomId })
    })

    socket.on("message", ({ text, from }) => {
      setChat(prev => [...prev, { text, from }])
    })

    socket.on("chatEnded", () => {
      setConnectedRoom(null)
      setChat([])
      setIsRoomReady(false)
      setInChat(false)
      alert("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç")
    })

    return () => {
      socket.off("connect")
      socket.off("joinRoom")
      socket.off("message")
      socket.off("roomReady")
      socket.off("chatEnded")
    }
  }, [])

  // üîç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
  const handleSearch = () => {
    socket.emit("join", {
      gender,
      ageGroup,
      seekingGender,
      seekingAgeGroup,
    })
  }

  // üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = () => {
    if (message.trim() === "") return
    socket.emit("message", { roomId: connectedRoom, text: message })
    setMessage("")
  }

  return (
    <div style={{ padding: "20px", fontFamily: "sans-serif" }}>
      <div>socket.id: {mySocketId}</div>
      <h2>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</h2>

      <div>
        <label>–í–∞—à –ø–æ–ª: </label>
        <select value={gender} onChange={e => setGender(e.target.value)}>
          <option value="m">–ú—É–∂—Å–∫–æ–π</option>
          <option value="f">–ñ–µ–Ω—Å–∫–∏–π</option>
        </select>
      </div>

      <div>
        <label>–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: </label>
        <select value={ageGroup} onChange={e => setAgeGroup(e.target.value)}>
          <option value="18+">18+</option>
          <option value="18-25">18‚Äì25</option>
          <option value="25-35">25‚Äì35</option>
          <option value="35+">35+</option>
        </select>
      </div>

      <div>
        <label>–ò—â—É –ø–æ–ª: </label>
        <select value={seekingGender} onChange={e => setSeekingGender(e.target.value)}>
          <option value="m">–ú—É–∂—Å–∫–æ–π</option>
          <option value="f">–ñ–µ–Ω—Å–∫–∏–π</option>
        </select>
      </div>

      <div>
        <label>–ò—â—É –≤–æ–∑—Ä–∞—Å—Ç: </label>
        <select value={seekingAgeGroup} onChange={e => setSeekingAgeGroup(e.target.value)}>
          <option value="18+">18+</option>
          <option value="18-25">18‚Äì25</option>
          <option value="25-35">25‚Äì35</option>
          <option value="35+">35+</option>
        </select>
      </div>

      <div style={{ marginTop: "20px" }}>
        <button onClick={handleSearch}>üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</button>
      </div>

      {connectedRoom && (
  <div style={{ marginTop: "20px" }}>
    ‚úÖ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∫–æ–º–Ω–∞—Ç–µ: <strong>{connectedRoom}</strong>
    {!isRoomReady && <div style={{ color: "orange", marginTop: 10 }}>–ñ–¥—ë–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶</div>}

    {isRoomReady && (
      <>
        <button
          onClick={handleEndChat}
          style={{ marginTop: 16, background: "red", color: "white" }}
        >
          –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç
        </button>

        <div style={{ marginTop: "20px" }}>
          <input
            type="text"
            value={message}
            onChange={e => setMessage(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            style={{ width: "300px", padding: "5px" }}
          />
          <button onClick={handleSendMessage} style={{ marginLeft: "10px" }}>
            ‚û§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </button>
        </div>

        <div style={{ marginTop: "20px" }}>
          <h4>–ß–∞—Ç:</h4>
          {chat.map((msg, i) => (
            <div key={i}>
              <strong>{msg.from === mySocketId ? "–í—ã" : "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫"}:</strong> {msg.text}
            </div>
          ))}
        </div>
      </>
    )}
  </div>
)}
    </div>
  )
}

export default App